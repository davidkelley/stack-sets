AWSTemplateFormatVersion: '2010-09-09'

Description: Global Region Orchestration

Parameters:

  Region:
    Type: String
    Description: Master Account Region

  Regions:
    Type: CommaDelimitedList
    Description: All Account Regions

Conditions:

  IsMasterRegion: !Equals
    - !Ref AWS::Region
    - !Ref Region

Resources:

  MasterRegion:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /Global/MasterRegion
      Type: String
      Value: !Ref Region
      Description: "Master AWS Region"

  ReplicationRegions:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /Global/Regions
      Type: StringList
      Value: !Join [ ",", !Ref "Regions" ]
      Description: "List of all deployed regions"

  RegionRole:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /Global/Role
      Type: String
      Value: !If
        - IsMasterRegion
        - Master
        - Slave
      Description: "Master AWS Region"

  GlobalImportValue:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GlobalImportValue
      Handler: index.handler
      Role: !GetAtt GlobalImportValueExecutionRole.Arn
      Runtime: nodejs6.10
      Code:
        # Inline contents of /globalImports.js
        ZipFile: |
          const response = require("cfn-response");
          const AWS = require("aws-sdk");
          exports.handler = (event, context) => {
            const { SourceRegion, Exports = ['.+'] } = event.ResourceProperties;
            const filters = Exports.map(e => new RegExp(e, 'i'));
            const id = `custom:cloudformation:${SourceRegion}:exports`;
            const cloudformation = new AWS.CloudFormation({ region: SourceRegion });
            try {
              cloudformation.listExports({}, (err, data) => {
                if (err) {
                  throw err;
                } else {
                  const obj = {};
                  data.Exports.forEach(({ Name, Value }) => {
                    const matches = filters.filter(f => f.test(Name));
                    if (matches.length > 0) obj[Name] = Value;
                  });
                  response.send(event, context, response.SUCCESS, obj, id);
                }
              });
            } catch (err) {
              console.error(err.message);
              response.send(event, context, response.FAILED, {}, id);
            }
          };

  GlobalImportValueLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GlobalImportValue}"
      RetentionInDays: 1

  GlobalImportValueExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: AssumedExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudformation:ListExports
                Effect: Allow
                Resource:
                  - "*"

Outputs:

  RegionRole:
    Description: Describes the role of this region
    Value: !GetAtt RegionRole.Value
    Export:
      Name: RegionRole

  MasterRegion:
    Description: Master Account Deployment Region
    Value: !GetAtt MasterRegion.Value
    Export:
      Name: MasterRegion

  GlobalImportValueToken:
    Description: Lambda Function Arn for Global Import
    Value: !GetAtt GlobalImportValue.Arn
    Export:
      Name: GlobalImportValue
